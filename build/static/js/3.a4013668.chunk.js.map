{"version":3,"sources":["redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/SingleContact/SingleContact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","containers/Contacts/Contacts.js"],"names":["getContacts","dispatch","a","contactsAction","getContactsRequest","axios","get","result","getContactsSeccess","data","getContactsError","addContact","name","number","addContactRequest","post","addContactSeccess","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSeccess","deleteContactError","itemsSelector","state","contacts","items","filterSelector","filter","getFilteredContact","createSelector","contact","toLowerCase","includes","getContactById","_","contactId","find","ContactForm","formInitialState","alert","inputHandler","target","value","setState","submitHandler","e","preventDefault","props","toggleAlert","reset","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","ownProps","TransitionGroup","component","map","key","handleFilter","Contacts","animation","onGetContacts","appear","length"],"mappings":"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","file":"static/js/3.a4013668.chunk.js","sourcesContent":["import axios from \"axios\";\nimport contactsAction from \"./contactsAction\";\n\nconst getContacts = () => async (dispatch) => {\n  dispatch(contactsAction.getContactsRequest());\n  try {\n    const result = await axios.get(\"/contacts\");\n    dispatch(contactsAction.getContactsSeccess(result.data));\n  } catch (error) {\n    dispatch(contactsAction.getContactsError(error));\n  }\n};\n\nconst addContact = (name, number) => async (dispatch) => {\n  dispatch(contactsAction.addContactRequest());\n  try {\n    const result = await axios.post(\"/contacts\", {\n      name,\n      number,\n    });\n    dispatch(contactsAction.addContactSeccess(result.data));\n  } catch (error) {\n    dispatch(contactsAction.addContactError(error));\n  }\n};\n\nconst deleteContact = (id) => async (dispatch) => {\n  dispatch(contactsAction.deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(contactsAction.deleteContactSeccess(id));\n  } catch (error) {\n    dispatch(contactsAction.deleteContactError(error));\n  }\n};\n\nexport default {\n  getContacts,\n  addContact,\n  deleteContact,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst itemsSelector = (state) => state.contacts.items;\nconst filterSelector = (state) => state.contacts.filter;\n\nconst getFilteredContact = createSelector(\n  [itemsSelector, filterSelector],\n  (items, filter) => {\n    return items.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nconst getContactById = createSelector(\n  [itemsSelector, (_, contactId) => contactId],\n  (items, contactId) => items.find((contact) => contact.id === contactId)\n);\n\nexport default {\n  itemsSelector,\n  filterSelector,\n  getFilteredContact,\n  getContactById,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = (e) => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const isExists = contacts.find((contact) => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    this.props.addContact(name, number);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = (status) => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"Alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"AlertBtn\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"ContactsForm\" onSubmit={this.submitHandler}>\n          <label className=\"InputName\">\n            Name\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <label className=\"InputName\">\n            Number\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <button type=\"submit\" className=\"SubmitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.itemsSelector(state),\n  filter: contactsSelectors.filterSelector(state),\n});\n\nconst mapDispatchToProps = {\n  addContact: contactsOperations.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport \"./SingleContact.css\";\n\nconst SingleContact = ({ name, number, deleteContact }) => {\n  return (\n    <li className=\"Contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button className=\"DelBtn\" type=\"button\" onClick={deleteContact}>\n        &#10008;\n      </button>\n    </li>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const contact = contactsSelectors.getContactById(state, ownProps.id);\n\n  return { ...contact };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deleteContact: () => dispatch(contactsOperations.deleteContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\n\nSingleContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport { contactsSelectors } from \"../../redux/contacts\";\nimport SingleContact from \"../SingleContact/SingleContact\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList\">\n      {contacts.map(({ id }) => (\n        <CSSTransition key={id} classNames=\"ListItem\" timeout={250}>\n          <SingleContact id={id} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getFilteredContact(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { contactsAction, contactsSelectors } from \"../../redux/contacts\";\nimport \"./Filter.css\";\n\nconst Filter = ({ filter, handleFilter }) => {\n  return (\n    <div className=\"FilterBox\">\n      <label className=\"InputLabel\">\n        Find contacts by name\n        <br />\n        <input\n          className=\"FilterForm\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: contactsSelectors.filterSelector(state),\n});\n\nconst mapDispatchToProps = {\n  handleFilter: contactsAction.handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    }).isRequired\n  ),\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport ContactList from \"../../components/ContactList/ContactList\";\nimport Filter from \"../../components/Filter/Filter\";\nimport \"./Contacts.css\";\n\nclass Contacts extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.props.onGetContacts();\n    this.setState((state) => ({\n      animation: !state.animation,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"Title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"AppTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm />\n\n        {this.props.contacts.length === 0 && (\n          <>\n            <h2 className=\"ContactTitle\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"FilterAnimation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter />\n        </CSSTransition>\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.itemsSelector(state),\n});\n\nconst mapDispatchToProps = {\n  onGetContacts: contactsOperations.getContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n"],"sourceRoot":""}